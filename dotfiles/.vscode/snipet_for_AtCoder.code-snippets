{
	// Place your AtCoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"bfs": {
		"prefix": "bfs",
		"body": [
			"from collections import deque",
			"def bfs(u,n,d):",
			"\t'''",
			"\tBFS:O(N*(edge number))",
			"\t@params",
			"\t\tint u: initial node ",
			"\t\tint n: number of total nodes ",
			"\t\tdict d: graph of all nodes ",
			"\t\t\tsample ",
			"\t\t\td = {0:[1,3],3:[2,4,5]} ",
			"\t@returns",
			"\t\tlist ans: list of depthes of each node",
			"\t'''",
			"\tqueue = deque([u])",
			"\tans = [-1] * (n+1)",
			"\twhile queue:",
			"\t\tv = queue.popleft()",
			"\t\tfor i in d[v]:",
			"\t\t\tif ans[i] == -1:",
			"\t\t\t\tans[i] = v",
			"\t\t\t\tqueue.append(i)",
			"\treturn ans"
		],
		"description": "bfs template"
	},
	"binarySearch" : {
		"prefix": "binary",
		"body": [
			"def binarySearch(M,m=-1):",
			"\t'''",
			"\t二分探索",
			"\tO(log(m)):m=len(lis)",
			"\t降順もしくは昇順ソートになってる必要あり",
			"\t'''",
			"\tng = m",
			"\tok = M",
			"\twhile abs(ok-ng) > 1:",
			"\t\tmid = (ok+ng)//2",
			"\t\tif isOk(mid): ok = mid",
			"\t\telse: ng = mid",
			"\t'''",
			"\tokはisOkで定義した条件を満たす最小の値",
			"\tngはisOkで定義した条件を満たさない最大の値",
			"\t'''",
			"\treturn ok",
			"def isOk(index):",
			"\t'''",
			"\tbinarySearch 用",
			"\tif節の条件は、必要に応じて変更の必要あり",
			"\t'''",
			"\tif index > key: return True",
			"\telse: return False"
		],
		"description": "binary search template"
	},
	"prime" : {
		"prefix": "prime",
		"body": [
			"def sieve_of_eratosthenes(n):",
			"\tprime = [i if i%2 == 1 else 2 for i in range(n+1)]",
			"\tprime[0] = 0",
			"\tprime[1] = 1",
			"\tfor i in range(3, int(n**0.5)+1):",
			"\t\tif prime[i] == i:",
			"\t\t\tfor j in range(2,n//i+1):",
			"\t\t\t\tprime[j*i] = i",
			"\treturn prime"
		],
		"description": "sieve of eratosthenes, it can use faster divisor calculations"
	},
	"visualize graph": {
		"prefix": "visual",
		"body": [
			// reference https://fuji-pocketbook.net/another-dir-module/
			"import sys",
			"sys.path.append(\"/home/vscode/scripts\")",
			"import visualize",
			"g = visualize.VisualGraph(G)",
			"print(g)",
			"g.generateMarkdown()"
		]
	}
}