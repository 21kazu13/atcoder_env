{
	// Place your AtCoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
    "lazy": {
        "prefix": "lazy",
        "body": [
            "########################## TO BE EDITED",
            "# 区間に対する積の計算",
            "def op(x,y):",
            "    # seg[x]とseg[y]の演算結果",
            "    return max(x,y)",
            "",
            "# opの単位元",
            "idx_ele = 0",
            "",
            "# 要素aに対する作用の定義",
            "def mapping(f,a):",
            "    # 加算",
            "    # return a+f",
            "    return",
            "",
            "# 作用の結合",
            "def composition(f,g):",
            "    # 順序注意！！！！！",
            "    # f(g(x))を計算する。",
            "    # 加算",
            "    # return f+g",
            "    return",
            "",
            "# 作用の単位元",
            "# 加算ならidx_ope = 0",
            "idx_ope = (0,0)",
            "",
            "########################## TO BE EDITED END",
            "",
            "class LazySegmentTree:",
            "    # https://atcoder.jp/contests/ABC332/submissions/48412693",
            "    def __init__(self, op=op, e=idx_ele, mapping=mapping, composition=composition, id_=idx_ope, v=10**6):",
            "        self._n = len(v) if isinstance(v, list) else v",
            "        self.op = op",
            "        self.e = e",
            "        self.mapping = mapping",
            "        self.composition = composition",
            "        self.id = id_",
            "        self.log = (self._n - 1).bit_length()",
            "        self.size = 1 << self.log",
            "        self.d = [e for _ in range(2 * self.size)]",
            "        self.lz = [id_ for _ in range(self.size)]",
            "        if isinstance(v, list): self.d[self.size: self.size + self._n] = v",
            "        [self._update(i) for i in reversed(range(1, self.size))]",
            "",
            "    def __repr__(self):",
            "        l, r = 1, 2",
            "        res = []",
            "        np_T = lambda x: [list(x) for x in zip(*x)]",
            "        while r <= self.size:",
            "            res.append(f'{np_T([self.d[l: r], self.lz[l: r]])}')",
            "            l, r = r, r << 1",
            "        res.append(f'{self.d[l: r]}')",
            "        return '\\n'.join(res)",
            "",
            "    def set(self, p, x):  # O(log n)",
            "        p += self.size",
            "        [self._push(p >> i) for i in reversed(range(1, self.log + 1))]",
            "        self.d[p] = x",
            "        [self._update(p >> i) for i in range(1, self.log + 1)]",
            "",
            "    def get(self, p):     # O(log n)",
            "        p += self.size",
            "        [self._push(p >> i) for i in reversed(range(1, self.log + 1))]",
            "        return self.d[p]",
            "",
            "    def prod(self, l, r):  # [l, r)   O(log n)",
            "        if l == r: return self.e",
            "        l += self.size",
            "        r += self.size",
            "        for i in reversed(range(1, self.log + 1)):",
            "            if ((l >> i) << i) != l: self._push(l >> i)",
            "            if ((r >> i) << i) != r: self._push((r - 1) >> i)",
            "        sml, smr = self.e, self.e",
            "        while (l < r):",
            "            if l & 1:",
            "                sml = self.op(sml, self.d[l])",
            "                l += 1",
            "            if r & 1:",
            "                r -= 1",
            "                smr = self.op(self.d[r], smr)",
            "            l >>= 1",
            "            r >>= 1",
            "        return self.op(sml, smr)",
            "",
            "    def all_prod(self):             # O(1)",
            "        return self.d[1]",
            "",
            "    def apply(self, p, f):          # O(log n)",
            "        p += self.size",
            "        [self._push(p >> i) for i in reversed(range(1, self.log + 1))]",
            "        self.d[p] = mapping(f, self.d[p])",
            "        [self._update(p >> i) for i in range(1, self.log + 1)]",
            "",
            "    def apply_range(self, l, r, f):   # O(log n)",
            "        if l == r: return",
            "        l += self.size",
            "        r += self.size",
            "        for i in reversed(range(1, self.log + 1)):",
            "            if ((l >> i) << i) != l: self._push(l >> i)",
            "            if ((r >> i) << i) != r: self._push((r - 1) >> i)",
            "        l2, r2 = l, r",
            "        while l < r:",
            "            if l & 1:",
            "                self._all_apply(l, f)",
            "                l += 1",
            "            if r & 1:",
            "                r -= 1",
            "                self._all_apply(r, f)",
            "            l >>= 1",
            "            r >>= 1",
            "        l, r = l2, r2",
            "        for i in range(1, self.log + 1):",
            "            if ((l >> i) << i) != l: self._update(l >> i)",
            "            if ((r >> i) << i) != r: self._update((r - 1) >> i)",
            "",
            "    def max_right(self, l, f):   # O(log n)",
            "        if l >= self._n: return self._n",
            "        l = max(l, 0) + self.size",
            "        for i in reversed(range(1, self.log + 1)):",
            "            self._push(l >> i)",
            "        sm = self.e",
            "        while True:",
            "            while l % 2 == 0: l >>= 1",
            "            if not f(self.op(sm, self.d[l])):",
            "                while l < self.size:",
            "                    self._push(l)",
            "                    l <<= 1",
            "                    if f(self.op(sm, self.d[l])):",
            "                        sm = self.op(sm, self.d[l])",
            "                        l += 1",
            "                return l - self.size",
            "            sm = self.op(sm, self.d[l])",
            "            l += 1",
            "            if l & -l == l: break",
            "        return self._n",
            "",
            "    def min_left(self, r, f):   # O(log n)",
            "        if r <= 0: return 0",
            "        r = min(r, self._n) + self.size",
            "        for i in reversed(range(1, self.log + 1)):",
            "            self._push((r - 1) >> i)",
            "        sm = self.e",
            "        while True:",
            "            r -= 1",
            "            while r > 1 and r % 2: r >>= 1",
            "            if not f(self.op(self.d[r], sm)):",
            "                while r < self.size:",
            "                    self._push(r)",
            "                    r = 2 * r + 1",
            "                    if f(self.op(self.d[r], sm)):",
            "                        sm = self.op(self.d[r], sm)",
            "                        r -= 1",
            "                return r + 1 - self.size",
            "            sm = self.op(self.d[r], sm)",
            "            if r & -r == r: break",
            "        return 0",
            "",
            "    def _update(self, k):",
            "        self.d[k] = self.op(self.d[2 * k], self.d[2 * k + 1])",
            "",
            "    def _all_apply(self, k, f):",
            "        self.d[k] = self.mapping(f, self.d[k])",
            "        if k < self.size: self.lz[k] = self.composition(f, self.lz[k])",
            "",
            "    def _push(self, k):",
            "        self._all_apply(2 * k, self.lz[k])",
            "        self._all_apply(2 * k + 1, self.lz[k])",
            "        self.lz[k] = self.id",
            "",
        ],
        "description": "Non recursion lazy segment tree"
    },

    "binarySearch" : {
		"prefix": "binary",
		"body": [
			"def binarySearch(M,m=-1):",
			"    ng = m",
			"    ok = M",
			"    while abs(ok-ng) > 1:",
			"        mid = (ok+ng)//2",
			"        if isOk(mid): ok = mid",
			"        else: ng = mid",
			"    return ok",
			"def isOk(index):",
			"    # 判定問題はなんですか？",
			"    pass"
		],
		"description": "binary search template"
	},
	"prime" : {
		"prefix": "prime",
		"body": [
			"def erato(n):",
			"    prime = [i if i%2 == 1 else 2 for i in range(n+1)]",
			"    prime[0] = -1",
			"    prime[1] = -1",
			"    for i in range(3, int(n**0.5)+1):",
			"        if prime[i] == i:",
			"            for j in range(2,n//i+1):",
			"                prime[j*i] = i",
			"    # return prime # to return fast prime factorization",
			"    return [i for i,v in enumerate(prime) if i==v] # to return prime list"
		],
		"description": "sieve of eratosthenes, it can use faster divisor calculations"
	},
	"visualize graph": {
		"prefix": "visual",
		"body": [
			// reference https://fuji-pocketbook.net/another-dir-module/
			"import sys",
			"sys.path.append(\"/home/vscode/scripts\")",
			"import visualize",
			"g = visualize.VisualGraph(G)",
			"print(g)",
			"g.generateMarkdown()"
		]
	},
	"divisor": {
        "prefix": "divisor",
        "body": [
            "def makeDivisorList(i:int) -> list:",
            "    '''",
            "    Make list of divisors: O(sqrt(N))",
            "    Args:",
            "        i(int): integer",
            "    Returns:",
            "        (list): list of diviors of i in ascending order.",
            "    '''",
            "    l = []",
            "    r = []",
            "    j = 1",
            "    while j**2<=i:",
            "        if i%j==0:",
            "            l.append(j)",
            "            r.append(i//j)",
            "        j+=1",
            "    if l[-1]==r[-1]: l.pop()",
            "    return l+r[::-1]",
        ],
        "description": "listing up divisor of input number"
    },
	"rle": {
        "prefix": "rle",
        "body": [
            "def RLE(s:str) -> deque:",
            "    '''",
            "    execute run length encoding with O(len(s))",
            "    Args:",
            "        s(string):",
            "            target string for run length encoding",
            "    Returns:",
            "        (deque):",
            "            result of run length encoding",
            "            each item in deque is list. [str, int]",
            "    '''",
            "    ret = deque()",
            "    for i in s:",
            "        if ret and ret[-1][0]==i:",
            "            ret[-1][1]+=1",
            "        else:",
            "            ret.append([i,1])",
            "    return ret",
        ],
        "description": "Run length encription"
    },
	"dijkstra": {
        "prefix": "dijkstra",
        "body": [
            "from heapq import heappush, heappop",
            "def dijkstra(s):",
            "    # Graph is given by adj-list form: ",
            "    #    G[v] = [(cost,nex)]",
            "    INF = 10**18",
            "    q = []",
            "    dist = [INF]*len(G)",
            "    dist[s] = 0",
            "    heappush(q,(0,s))",
            "    while q:",
            "        cur, v = heappop(q)",
            "        if dist[v]<cur: continue",
            "        for add,nex in G[v]:",
            "            nc = cur+add",
            "            if nc<dist[nex]:",
            "                dist[nex] = nc",
            "                heappush(q,(nc,nex))",
            "    return dist",
        ],
        "description": "Dijkstra method"
    },
	"functional graph": {
        "prefix": "functional graph",
        "body": [
            "class FunctionalGraph():",
            "    def __init__(self,A:list):",
            "        '''",
            "        N頂点N辺、各頂点の出次数が1のグラフ",
            "        連結成分ごとにサイクルが存在する",
            "        Args:",
            "            A(list): describe edge i->A[i] (0-indexed)",
            "        '''",
            "        self.G = [[] for _ in range(len(A))]",
            "        self.N = len(A)",
            "        for i,v in enumerate(A):",
            "            self.G[i].append(v)",
            "",
            "    def detect_cycle(self,s):",
            "        '''",
            "        sから始めてcycleを検出する",
            "        '''",
            "        seen = [-1]*self.N",
            "        seen[s] = 0",
            "        ret = [s]",
            "        while True:",
            "            for nex in self.G[ret[-1]]:",
            "                if seen[nex] != -1:",
            "                    #cycle detected",
            "                    return (ret[:seen[nex]],ret[seen[nex]:])",
            "                seen[nex] = seen[ret[-1]]+1",
            "                ret.append(nex)",
        ],
        "description": "Functional graph"
    }
}