{
	// Place your AtCoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"bfs": {
		"prefix": "bfs",
		"body": [
			"from collections import deque",
			"def bfs(u,n,d):",
			"\t'''",
			"\tBFS:O(N*(edge number))",
			"\t@params",
			"\t\tint u: initial node ",
			"\t\tint n: number of total nodes ",
			"\t\tdict d: graph of all nodes ",
			"\t\t\tsample ",
			"\t\t\td = {0:[1,3],3:[2,4,5]} ",
			"\t@returns",
			"\t\tlist ans: list of depthes of each node",
			"\t'''",
			"\tqueue = deque([u])",
			"\tans = [-1] * (n+1)",
			"\twhile queue:",
			"\t\tv = queue.popleft()",
			"\t\tfor i in d[v]:",
			"\t\t\tif ans[i] == -1:",
			"\t\t\t\tans[i] = v",
			"\t\t\t\tqueue.append(i)",
			"\treturn ans"
		],
		"description": "bfs template"
	},
	"binarySearch" : {
		"prefix": "binary",
		"body": [
			"def binarySearch(M,m=-1):",
			"\tng = m",
			"\tok = M",
			"\twhile abs(ok-ng) > 1:",
			"\t\tmid = (ok+ng)//2",
			"\t\tif isOk(mid): ok = mid",
			"\t\telse: ng = mid",
			"\t'''",
			"\tokはisOkで定義した条件を満たす最小の値",
			"\tngはisOkで定義した条件を満たさない最大の値",
			"\t'''",
			"\treturn ok",
			"def isOk(index):",
			"\t'''",
			"\tbinarySearch 用",
			"\tif節の条件は、必要に応じて変更の必要あり",
			"\t'''",
			"\tif index > key: return True",
			"\telse: return False"
		],
		"description": "binary search template"
	},
	"prime" : {
		"prefix": "prime",
		"body": [
			"def erato(n):",
			"\tprime = [i if i%2 == 1 else 2 for i in range(n+1)]",
			"\tprime[0] = -1",
			"\tprime[1] = -1",
			"\tfor i in range(3, int(n**0.5)+1):",
			"\t\tif prime[i] == i:",
			"\t\t\tfor j in range(2,n//i+1):",
			"\t\t\t\tprime[j*i] = i",
			"# \treturn prime # to return fast prime factorization",
			"\treturn [i for i,v in enumerate(prime) if i==v] # to return prime list"
		],
		"description": "sieve of eratosthenes, it can use faster divisor calculations"
	},
	"visualize graph": {
		"prefix": "visual",
		"body": [
			// reference https://fuji-pocketbook.net/another-dir-module/
			"import sys",
			"sys.path.append(\"/home/vscode/scripts\")",
			"import visualize",
			"g = visualize.VisualGraph(G)",
			"print(g)",
			"g.generateMarkdown()"
		]
	},
	"divisor": {
        "prefix": "divisor",
        "body": [
            "def makeDivisorList(i:int) -> list:",
            "    '''",
            "    Make list of divisors: O(sqrt(N))",
            "    Args:",
            "        i(int): integer",
            "    Returns:",
            "        (list): list of diviors of i in ascending order.",
            "    '''",
            "    l = []",
            "    r = []",
            "    j = 1",
            "    while j**2<=i:",
            "        if i%j==0:",
            "            l.append(j)",
            "            r.append(i//j)",
            "        j+=1",
            "    if l[-1]==r[-1]: l.pop()",
            "    return l+r[::-1]",
        ],
        "description": "listing up divisor of input number"
    },
	"rle": {
        "prefix": "rle",
        "body": [
            "def RLE(s:str) -> deque:",
            "    '''",
            "    execute run length encoding with O(len(s))",
            "    Args:",
            "        s(string):",
            "            target string for run length encoding",
            "    Returns:",
            "        (deque):",
            "            result of run length encoding",
            "            each item in deque is list. [str, int]",
            "    '''",
            "    ret = deque()",
            "    for i in s:",
            "        if ret and ret[-1][0]==i:",
            "            ret[-1][1]+=1",
            "        else:",
            "            ret.append([i,1])",
            "    return ret",
        ],
        "description": "Run length encription"
    },
	"dijkstra": {
        "prefix": "dijkstra",
        "body": [
            "from heapq import heappush, heappop",
            "def dijkstra(s):",
            "    # Graph is given by adj-list form: ",
            "    #    G[v] = [(cost,nex)]",
            "    INF = 10*18",
            "    q = []",
            "    dist = [10**18]*len(G)",
            "    dist[s] = 0",
            "    heappush(q,(0,s))",
            "    while q:",
            "        cur, v = heappop(q)",
            "        if dist[v]<cur: continue",
            "        for add,nex in G[v]:",
            "            nc = cost+add",
            "            if nc<dist[v]:",
            "                dist[v] = nc",
            "                heappush(q,(nc,nex))",
            "    return dist",
        ],
        "description": "Dijkstra method"
    },
	"functional graph": {
        "prefix": "functional graph",
        "body": [
            "class FunctionalGraph():",
            "    def __init__(self,A:list):",
            "        '''",
            "        N頂点N辺、各頂点の出次数が1のグラフ",
            "        連結成分ごとにサイクルが存在する",
            "        Args:",
            "            A(list): describe edge i->A[i] (0-indexed)",
            "        '''",
            "        self.G = [[] for _ in range(len(A))]",
            "        self.N = len(A)",
            "        for i,v in enumerate(A):",
            "            self.G[i].append(v)",
            "",
            "    def detect_cycle(self,s):",
            "        '''",
            "        sから始めてcycleを検出する",
            "        '''",
            "        seen = [-1]*self.N",
            "        seen[s] = 0",
            "        ret = [s]",
            "        while True:",
            "            for nex in self.G[ret[-1]]:",
            "                if seen[nex] != -1:",
            "                    #cycle detected",
            "                    return (ret[:seen[nex]],ret[seen[nex]:])",
            "                seen[nex] = seen[ret[-1]]+1",
            "                ret.append(nex)",
        ],
        "description": "Functional graph"
    }
}